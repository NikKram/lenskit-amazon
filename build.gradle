/* This file may be freely modified, used, and redistributed without restriction. */
/* Set up the repositories to get the LensKit plugin.
 * This configuration pulls in things needed for the build.gradle script itself */
buildscript {
    repositories {
        // allow maven local to be turned on
        if ((project.findProperty('maven.useLocal') ?: 'no') == 'yes') {
            mavenLocal()
        }
        // LensKit snapshots are published to the Sonatype snapshot repository
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        // LensKit releases are published to Maven Central
        mavenCentral()
    }
    dependencies {
        classpath "org.lenskit:lenskit-gradle:${project.findProperty('lenskit.version') ?: '3.0-SNAPSHOT'}"
    }
}

apply plugin: 'java' // if you use Groovy or Scala, add those plugins
apply plugin: 'lenskit'

/* Set up the repositories for getting LensKit and other libraries.
 * These repositories are used for your Java or Groovy code, and for running LensKit.
 */
repositories {
    // allow maven local to be turned on
    if ((project.findProperty('maven.useLocal') ?: 'no') == 'yes') {
        mavenLocal()
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenCentral()
}

dependencies {
    // Code needs to build with LensKit.
    compile "org.lenskit:lenskit-all:${project.findProperty('lenskit.version') ?: '3.0-SNAPSHOT'}"
    // To run the code, we also need the LensKit CLI.
    runtime "org.lenskit:lenskit-cli:${project.findProperty('lenskit.version') ?: '3.0-SNAPSHOT'}"

    // Tests use JUnit
    testCompile "junit:junit:4.12"
}

/* Configure LensKit */
lenskit {
    // you can configure the threadCount and maxMemory here, or on the command line
    // e.g. -PthreadCount=8
}

import org.lenskit.gradle.*

def azDir = project.findProperty('amazonDir') ?: 'data/amazon'

def azData = [
        clothing: 'Clothing_Shoes_and_Jewelry',
        books: 'Books',
        music: 'Digital_Music',
        kindle: 'Kindle_Store',
        movies: 'Movies_and_TV',
        video: 'Amazon_Instant_Video'
]

def azSets = project.findProperty('dataSets')?.split(/,/) ?: azData.keySet()

task evaluate(type: TrainTest, group: 'evaluate') {
    description 'Runs the LensKit evaluation for Amazon data.'
    ext.key = "amzn"

    logFile "$buildDir/evaluate-amzn.log"

    // send the output to appropriate files
    outputFile "$buildDir/eval-results.csv"
    userOutputFile "$buildDir/eval-users.csv.gz"

    // configure our algorithms
    algorithm 'PersMean', 'algorithms/pers-mean.groovy'
    algorithm 'ItemItem', 'algorithms/item-item.groovy'
    // algorithm 'FunkSVD', 'algorithms/funksvd.groovy'
    algorithm 'Popular', 'algorithms/popular.groovy'
    // algorithm 'II-Pop', 'algorithms/ii-pop.groovy'
    // algorithm 'SVD-Pop', 'algorithms/funksvd-pop.groovy'

    predict {
        metric 'coverage'
        metric 'rmse'
        metric 'ndcg'
    }
    recommend {
        listSize 100
        metric 'length'
        metric 'ndcg'
        metric 'map'
        metric 'mrr'
    }
}

task convertAmazon(group: 'preprocessing') {
    description 'Convert Amazon data for LensKit'
}

for (d in azData) {
    def name = d.key
    def src = d.value
    convertAmazon.dependsOn task("convertAmazon${name.capitalize()}", type: Exec) {
        inputs.file "$azDir/ratings_${src}.csv"
        inputs.file 'data/preprocess-amazon.R'
        outputs.dir "data/az-$name"

        executable 'Rscript'
        args file('data/preprocess-amazon.R')
        args file("$azDir/ratings_${src}.csv")
        args file("data/az-$name")

        doLast {
            copy {
                from 'data'
                into "data/az-$name"
                include 'amazon.yml'
            }
        }

        // bail out early
        onlyIf {
            !file("data/az-$name/amazon.yml").exists()
        }
    }
}

task crossfoldAmazon(group: 'preprocessing') {
    description 'Crossfold Amazon data'
}

for (d in azData) {
    def name = d.key
    def src = d.value
    def cft = task("crossfoldAmazon${name.capitalize()}", type: Crossfold, group: 'preprocessing') {
        dependsOn "convertAmazon${name.capitalize()}"
        input "data/az-$name/amazon.yml"
        dataSetName "AMZN-$src"
        outputDir "$buildDir/az-${name}.xf"
        outputFormat 'gz'
        // test on random 5 ratings for each user
        holdout(5, 'random')
        // use 5-fold cross-validation
        partitionCount 5
        // sample 2000 users per fold
        sampleSize 2000
        method 'sample-users'

        // bail out early
        onlyIf {
            !file("$outputDirectory/datasets.yaml").exists()
        }
    }
    if (azSets.contains(name)) {
        evaluate.dataSet cft, isolate: true
    }
}

task analyzeResults(type: Exec, group: 'evaluate') {
    description 'Post-processes evaluation results to draw charts.'

    dependsOn evaluate

    inputs.files "$buildDir/eval-results.csv", 'analyze-output.ipynb'
    outputs.file "$buildDir/analysis.html"

    /* run Jupyter/IPython. Location can be overridden with -Pipython.bin=/usr/bin/ipython */
    if (project.hasProperty('ipython.bin')) {
        executable project.getProperty('ipython.bin')
    } else {
        executable 'jupyter'
    }
    args 'nbconvert', '--to', 'html', '--execute'
    args '--output', file("$buildDir/analysis.html")
    args file("analyze-output.ipynb")
}

task cleanData {
    doLast {
        delete 'data'
    }
}
